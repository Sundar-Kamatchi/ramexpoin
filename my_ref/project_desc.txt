Project Description
Onion Export Management
Onion can be categorized by its size 25mm, 27mm, 30mm like that.
Client is exporting onion.
He is procuring onion in various category based on his customer's requirement by placing purchase orders to this vendors (he may be farmer or agent)
Vendor agrees to supply onions at a specfic rate for e.g 30mm onion 50Tonnes at the Rate Rs.9/ per kg.  He also agrees damages allowed percentage (e.g 10%) and assures 80% of the cargo meets the required spec. of onion category (here 30mm).
1. PO
Client releases purchase order with the vendor acceptance detail along with the approximate selling rate of 'Podi' Podi means very small size of onion mixed in the onion. (1st Card of our app)
Since the client using tally prime, this po will have to transfer to tally through api.
2.Pre GR
Now vendor starts supply:   On cargo/lorry vehicle enters the client's godown, client first calls the PO for this vendor and picks the po detail and record the weight of goods by calculating Loaded weight of the vehicle minus the empty weight of vehicle. So he gets the net weight of onion (For e.g 12tons) . Client is storing this information along with GR No, date, weigh bridge name, vehicle number.
After that client uses sieves with 3 layers for segregating the onion by its sizes.  Client ordered 30 mm, out of the received 12tons 9.5 tons only matches the ordered size. 2nd layer of sieve may contain 25mm to 28mm sizes (they called this as Gap Items)  which he can not export to the customer but he can hold it for some other customer who used order that sizes. 3rd layer of sieve is called 'podi' which he can sell at very cheap rate for e.g Rs.4/-.  Now the client not knowing exact weight. he simply stores the bags of Gap Item(s) and 'Podi'.
On rough calculation, our client's admin can decide the input export qualtiy onion weight and approve this cargo by giving a note to his office for making advance payment (say 70% of onion received). Once the admin approves this pre-gr, users not allowed to manipulate anything in this particular pre-gr.
3. GQR (Goods Quality Report):
After the segregation completed,  workers started examining the received onion for quality, there they will find some rot and doubles(meaning not rot but with combination of 2 layer onion which the client can not export).  Sand, Setthai, Rot and doubles are all to be wasted only.
After deducting these wastages, admin arrived the weight shortage. Actually vendor claims full weight of his supply but client can accept the net weight after the dedution and adding the received podi item rate,gap items value .  Based on this, client can conclude the net worrth of the onion. Already he knows the commited rate of his buyer. So client compares with his buyer's committed rate with received onion's cost, he will decide the balance payment to be given to vendor or debit note to be raised to the vendor.
On final decision of this consignment, a receipt note entry with balance payment to be given to vendor or along with a debit note to be sent to tally.
4. Reports & Analysis
Complete report to be generated from PO to GQR with both estimation and actuals

Next js 15.4.3
Supabase
??? .env
??? .gitignore
??? components.json
??? create_tree.js
??? eslint.config.mjs
??? jsconfig.json
??? my_ref
?   ??? project description.rtf
?   ??? supabase user profile sql.txt
??? next-env.d.ts
??? next.config.mjs
??? package-lock.json
??? package.json
??? postcss.config.mjs
??? project-structure.txt
??? public
?   ??? file.svg
?   ??? globe.svg
?   ??? icon.ico
?   ??? next.svg
?   ??? ramlogo.png
?   ??? vercel.svg
?   ??? window.svg
??? README.md
??? src
?   ??? .env
?   ??? app
?   ?   ??? .env.local
?   ?   ??? api
?   ?   ?   ??? admin
?   ?   ?   ?   ??? users
?   ?   ?   ?       ??? route.jsx
?   ?   ?   ?       ??? [id]
?   ?   ?   ?           ??? route.jsx
?   ?   ?   ??? tally-companies
?   ?   ?   ?   ??? route.jsx
?   ?   ?   ??? tally-post-po
?   ?   ?   ?   ??? route.jsx
?   ?   ?   ??? tally-status
?   ?   ?       ??? route.jsx
?   ?   ??? favicon.ico
?   ?   ??? globals.css
?   ?   ??? gqr
?   ?   ?   ??? [id]
?   ?   ?       ??? page.jsx
?   ?   ??? gqr-list
?   ?   ?   ??? page.jsx
?   ?   ??? layout.jsx
?   ?   ??? login
?   ?   ?   ??? page.jsx
?   ?   ??? page.jsx
?   ?   ??? po
?   ?   ?   ??? page.jsx
?   ?   ?   ??? [id]
?   ?   ?       ??? page.jsx
?   ?   ??? po-list
?   ?   ?   ??? page.jsx
?   ?   ??? pre-gr
?   ?   ?   ??? page.jsx
?   ?   ?   ??? [id]
?   ?   ?       ??? page.jsx
?   ?   ??? pre-gr-list
?   ?   ?   ??? page.jsx
?   ?   ??? user-management
?   ?       ??? page.jsx
?   ??? components
?   ?   ??? AppFooter.jsx
?   ?   ??? AppHeader.jsx
?   ?   ??? auth-provider.jsx
?   ?   ??? AuthButton.jsx
?   ?   ??? AuthWrapper.jsx
?   ?   ??? ClientWrapper.jsx
?   ?   ??? floating-shapes.jsx
?   ?   ??? LoginModal.jsx
?   ?   ??? providers
?   ?   ?   ??? ThemeProvider.jsx
?   ?   ??? sidebar.jsx
?   ?   ??? TallyPurchaseOrderComponent.jsx
?   ?   ??? ThemeDebug.jsx
?   ?   ??? ThemeToggle.jsx
?   ?   ??? ui
?   ?       ??? button.jsx
?   ?       ??? dialog.jsx
?   ?       ??? dropdown-menu.jsx
?   ?       ??? input.jsx
?   ?       ??? label.jsx
?   ?       ??? sonner.jsx
?   ?       ??? table.jsx
?   ??? hooks
?   ?   ??? use-parallax.jsx
?   ??? lib
?   ?   ??? supabaseClient.jsx
?   ?   ??? supabaseServer.jsx
?   ?   ??? userService.js
?   ?   ??? utils.js
?   ??? middleware.js
?   ??? utils
?       ??? tallyXmlTemplates.jsx
??? supabase
    ??? .branches
    ?   ??? _current_branch
    ??? .temp
    ?   ??? cli-latest
    ??? schema.sql